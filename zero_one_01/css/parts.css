@charset "utf-8";
/* ローディング画面全体をカバーするスタイル */
#loading {
	position: fixed; /* 画面全体に固定 */
	width: 100%; /* 幅100% */
	height: 100%; /* 高さ100% */
	background: #ffffff; /* 白背景 */
	z-index: 9999999; /* 最前面に表示 */
	text-align: center; /* テキストを中央寄せ */
}

/* ローディングアイコンの位置調整 */
#loading-logo {
	position: absolute; /* 絶対位置指定 */
	top: 50%; /* 上下中央に配置 */
	left: 50%; /* 左右中央に配置 */
	transform: translate(-50%, -50%); /* 位置を正確に中央に調整 */
}

/* 初期状態では非表示に設定 */
.loadingbg {
    display: none;
}

/* appearクラスがbodyに追加されたら表示する設定 */
body.appear .loadingbg {
	display: block; /* 表示 */
	animation-name: PageAnime; /* アニメーション名指定 */
	animation-duration: 1.2s; /* アニメーションの実行時間 */
	animation-timing-function: ease-in-out; /* アニメーションの速度曲線 */
	animation-fill-mode: forwards; /* アニメーション終了後、最後のプロパティ値を保持 */
    content: ""; /* 内容は空 */
    position: fixed; /* 固定位置 */
	z-index: 999; /* z-indexで重なり順制御 */
    width: 50%; /* 幅50% */
    height: 100vh; /* 高さはビューポートの100% */
    top: 0;
	left: 0;
    background-color: #000000; /* 背景色は黒 */
}

/* 画面遷移アニメーションのキーフレーム設定 */
@keyframes PageAnime {
	0% {
		transform-origin: left; /* 変形の原点は左 */
		transform: translateX(-300%) skewX(0deg); /* 左に移動して斜めに傾ける */
	}
	100% {
		transform-origin: left; /* 変形の原点は左 */
		transform: translateX(500%) skewX(90deg); /* 右に大きく移動して斜めに傾ける */
	}
}

/* 画面遷移後のコンテンツが表示される設定 */
#container {
    position: relative; /* 相対位置 */
	opacity: 0; /* 初期透明度は0 */
}

/* appearクラスがbodyに追加されたらコンテンツを表示するアニメーション */
body.appear #container {
	animation-name: PageAnimeAppear; /* アニメーション名指定 */
	animation-duration: 1s; /* アニメーションの実行時間 */
	animation-delay: 0.6s; /* アニメーション開始までの遅延時間 */
	animation-fill-mode: forwards; /* アニメーション終了後、最後のプロパティ値を保持 */
	opacity: 0; /* アニメーション開始時の透明度 */
}

/* コンテンツ表示アニメーションのキーフレーム設定 */
@keyframes PageAnimeAppear {
	0% {
		opacity: 0; /* 開始時透明 */
	}
	100% {
		opacity: 1; /* 終了時は完全に表示 */
	}
}

/*ナビゲーションのためのCSS*/

/* アクティブになったナビゲーションエリアのスタイル */
#g-nav.panelactive {
    position: fixed; /* 固定位置 */
    z-index: 999; /* 前面に表示 */
	top: 0;
	width: 100%; /* 幅100% */
    height: 100vh; /* 高さはビューポートの100% */
}

/*丸の拡大*/
.circle-bg{
    position: fixed;
	z-index:3;
    /*丸の形*/
    width: 100px;
    height: 100px;
    border-radius: 50%;
	animation: bgchange 40s ease infinite;/*変化の時間を変更したい場合は sの部分を好きな時間に変更*/
    /*丸のスタート位置と形状*/
	transform: scale(0);/*scaleをはじめは0に*/
    top:calc(50% - 50px);/*50%から円の半径を引いた値*/
    left:calc(50% - 50px);/*50%から円の半径を引いた値*/
    transition: all 0.6s;/*0.6秒かけてアニメーション*/
}

.circle-bg.circleactive{
	transform: scale(50);/*クラスが付与されたらscaleを拡大*/
}

/*ナビゲーションの縦スクロール*/
#g-nav-list{
    display: none;/*はじめは表示なし*/
    /*ナビの数が増えた場合縦スクロール*/
    position: fixed;
    z-index: 999; 
    width: 100%;
    height: 100vh;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}

#g-nav.panelactive #g-nav-list{
     display: block; /*クラスが付与されたら出現*/
}

/*ナビゲーション*/
#g-nav ul {
	opacity: 0;/*はじめは透過0*/
    /*ナビゲーション天地中央揃え※レイアウトによって調整してください。不必要なら削除*/
    position: absolute;
    z-index: 999;
    top:50%;
    left:50%;
    transform: translate(-50%,-50%);
}

/*背景が出現後にナビゲーションを表示*/
#g-nav.panelactive ul {
    opacity:1;
}

/* 背景が出現後にナビゲーション li を表示※レイアウトによって調整してください。不必要なら削除*/
#g-nav.panelactive ul li{
animation-name:gnaviAnime;
animation-duration:1s;
animation-delay:.2s;/*0.2 秒遅らせて出現*/
animation-fill-mode:forwards;
opacity:0;
}
@keyframes gnaviAnime{
0% {
opacity: 0;
}
100% {
opacity: 1;
}
}

/*リストのレイアウト設定*/
#g-nav li{
	text-align: center; 
	list-style: none;
}

#g-nav li a{
	color: #333;
	text-decoration: none;
	padding:10px;
	display: block;
	text-transform: uppercase;
	letter-spacing: 0.1em;
	font-weight: bold;
}

@media screen and (max-width:768px) {
#g-nav li a{
	padding:5px 10px;
}    
}


/*ボタン外側※レイアウトによってpositionや形状は適宜変更してください*/
.openbtn{
	position: fixed;/*ボタン内側の基点となるためrelativeを指定*/
    top:2.5vh;
    right:2vw;
    z-index: 9999;
	cursor: pointer;
    width: 50px;
    height:10px;
}

/*ボタン内側*/
.openbtn .openbtn-area{
    transition: all 1.8s;/*アニメーションの設定*/
	width:50px;
	height:50px;
}

.openbtn span{
    display: inline-block;
    transition: all .4s;
    position: absolute;
    left: 14px;
    height: 3px;
    border-radius: 2px;
	background: #000000;
  	width: 45%;
  }

.openbtn span:nth-of-type(1) {
	top:15px;	
}

.openbtn span:nth-of-type(2) {
	top:23px;
}

.openbtn span:nth-of-type(3) {
	top:31px;
}

/*activeクラスが付与されると .openbtn-areaが360度回転し、その中の線が回転して×に*/
.openbtn.active .openbtn-area{
	transform: rotate(360deg);
}

.openbtn.active span:nth-of-type(1) {
    top: 18px;
    left: 18px;
    transform: translateY(6px) rotate(-45deg);
    width: 30%;
}

.openbtn.active span:nth-of-type(2) {
	opacity: 0;
}

.openbtn.active span:nth-of-type(3){
    top: 30px;
    left: 18px;
    transform: translateY(-6px) rotate(45deg);
    width: 30%;
}

/*== ボタン共通設定 */
.btn02 {
    position: relative; /* ボタンの基点として位置を指定 */
    display: inline-block; /* ブロックレベルのフロー内要素として表示 */
    margin: 1vh 0 0 0; /* 上に8vhのマージンを設定 */
    width: 100%; /* 親要素に対して100%の幅 */
    max-width: 250px; /* 最大幅を250pxに制限 */
    height: 50px; /* 高さを50pxに設定 */
    line-height: 50px; /* 行の高さをボタンの高さに合わせる */
    text-align: center; /* テキストを中央揃えに */
    outline: none; /* アウトラインを無効化 */
}

/* ボタン内側のスタイリング */
.btn02 span {
    display: block; /* ブロックレベル要素として表示 */
    position: absolute; /* 絶対位置指定 */
    width: 100%; /* 全幅 */
    height: 100%; /* 全高 */
    border: 3px solid #000000; /* 黒色の境界線を設定 */
    transform-style: preserve-3d; /* 3D変形を有効化 */
    transition: 0.5s; /* トランジション効果を0.5秒で適用 */
}

/* 回転アニメーションの設定 */
.rotatefront span:nth-child(1) {
    color: #000; /* 文字色を黒に設定 */
    transform: rotateX(0deg); /* 初期状態では回転なし */
    transform-origin: 0 50% -25px; /* 回転の原点を設定 */
}

/* ホバー時の回転アニメーション */
.rotatefront:hover span:nth-child(1) {
    transform: rotateX(-90deg); /* X軸を中心に-90度回転 */
}

/* 回転後の背景とテキスト色設定 */
.rotatefront span:nth-child(2) {
    background: #000; /* 背景色を黒に設定 */
    color: #fff; /* 文字色を白に設定 */
    transform: rotateX(90deg); /* X軸を中心に90度回転 */
    transform-origin: 0 50% -25px; /* 回転の原点を設定 */
}

/* ホバー時の回転戻し */
.rotatefront:hover span:nth-child(2) {
    transform: rotateX(0deg); /* X軸を中心に0度回転（元に戻す） */
}

/* スムーズアニメーション効果 */
.glide{
    animation-name: glideAnime; /* アニメーション名を指定 */
    animation-duration: 1s; /* アニメーションの持続時間を1秒に設定 */
    animation-fill-mode: forwards; /* アニメーション完了時のスタイルを維持 */
    transform-origin: left; /* 変形の原点を左側に設定 */
    opacity: 0; /* 初期透明度を0に設定 */
}

/* スムーズアニメーションのキーフレーム */
@keyframes glideAnime{
    from {
        transform: translate3d(0, 100%, 0) skewY(12deg); /* Y軸方向に100%ずらし、Y軸を12度傾ける */
        opacity: 0; /* 開始時の透明度 */
    }
    to {
        transform: translate3d(0, 0, 0) skewY(0); /* 元の位置に戻し、傾きを解除 */
        opacity: 1; /* 終了時の透明度 */
    }
}

/* スクロール時のアニメーショントリガー */
.glideTrigger{
    opacity: 0; /* 初期透明度を0に設定 */
}

/* テキストアニメーションの基本設定 */
span.glideText {
    overflow: hidden; /* はみ出しを隠す */
    display: block; /* ブロックレベル要素として表示 */
}

/* テキストアニメーションのトリガー */
span.glideTextTrigger{
    transition: .8s ease-in-out; /* トランジション効果を0.8秒で適用 */
    transform: translate3d(0, 100%, 0) skewY(12deg); /* Y軸方向に100%移動し、Y軸を12度傾ける */
    transform-origin: left; /* 変形の原点を左側に設定 */
    display: block; /* ブロックレベル要素として表示 */
}

/* テキストアニメーションのアクティブ時 */
span.glideTextTrigger.glideTextAppear{
    transform: translate3d(0, 0, 0) skewY(0); /* 元の位置に戻し、傾きを解除 */
}

/* 背景色変更アニメーションの設定 */
body {
    animation: bgchange 40s ease infinite; /* 背景色変更のアニメーションを40秒周期で無限に繰り返し */
}

/* 背景色変更アニメーションのキーフレーム */
@keyframes bgchange {
    0%, 25% { background: #ffffff; } /* 開始から25%の間は白色 */
    50%{ background: #F58220; }
    70% { background: #f57200; } /* 最終的にオレンジ色に変化 */
    100% { background: #ffffff; } 
}

/* 固定ポジションの設定 */
.fixed{
    position: -webkit-sticky; /* Safariのためのsticky指定 */
    position: sticky; /* 他のブラウザでのsticky指定 */
    top: 0; /* 上端から0pxの位置に固定 */
}

/* レスポンシブデザイン時の固定位置解除 */
@media screen and (max-width:768px) {
    .fixed{
        position: relative!important; /* スクリプトによる位置指定を上書き */
    }
}



